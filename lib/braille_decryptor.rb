require 'pry'
class BrailleDecryptor
  def initialize

  end

  def decrypt(braille)
    decryption = {
                  ["0.","..",".."] => "a",
                  ["0.","0.",".."] => "b",
                  ["00","..",".."] => "c",
                  ["00",".0",".."] => "d",
                  ["0.",".0",".."] => "e",
                  ["00","0.",".."] => "f",
                  ["00","00",".."] => "g",
                  ["0.","00",".."] => "h",
                  [".0","0.",".."] => "i",
                  [".0","00",".."] => "j",
                  ["0.","..","0."] => "k",
                  ["0.","0.","0."] => "l",
                  ["00","..","0."] => "m",
                  ["00",".0","0."] => "n",
                  ["0.",".0","0."] => "o",
                  ["00","0.","0."] => "p",
                  ["00","00","0."] => "q",
                  ["0.","00","0."] => "r",
                  [".0","0.","0."] => "s",
                  [".0","00","0."] => "t",
                  ["0.","..","00"] => "u",
                  ["0.","0.","00"] => "v",
                  [".0","00",".0"] => "w",
                  ["00","..","00"] => "x",
                  ["00",".0","00"] => "y",
                  ["0.",".0","00"] => "z",
                  ["..","00","0."] => "!",
                  ["..","..","0."] => "'",
                  ["..","0.",".."] => ",",
                  ["..","..","00"] => "-",
                  ["..","00",".0"] => ".",
                  ["..","0.","00"] => "?",
                  ["..","..",".0"] => "CAPS"
                  }

      if braille.length < 12
        decryption[braille.chars.each_slice(2).map(&:join)]
      else
        letter_break = braille.chars.each_slice(6).map(&:join)
        match_key = letter_break.map do |letter|
          letter.chars.each_slice(2).map(&:join)
        end
        match_key.map {|letter| decryption[letter]}.join
      end
    end
    # binding.pry
  end
