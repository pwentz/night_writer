require 'pry'
class Decryptor
  def initialize

  end

  def decrypt(braille)
    braille = braille.split("")
    decryption = {
                  ["0",".","\n",".",".","\n",".","."] => "a",
                  ["0",".","\n","0",".","\n",".","."] => "b",
                  ["0","0","\n",".",".","\n",".","."] => "c",
                  ["0","0","\n",".","0","\n",".","."] => "d",
                  ["0",".","\n",".","0","\n",".","."] => "e",
                  ["0","0","\n","0",".","\n",".","."] => "f",
                  ["0","0","\n","0","0","\n",".","."] => "g",
                  ["0",".","\n","0","0","\n",".","."] => "h",
                  [".","0","\n","0",".","\n",".","."] => "i",
                  [".","0","\n","0","0","\n",".","."] => "j",
                  ["0",".","\n",".",".","\n","0","."] => "k",
                  ["0",".","\n","0",".","\n","0","."] => "l",
                  ["0","0","\n",".",".","\n","0","."] => "m",
                  ["0","0","\n",".","0","\n","0","."] => "n",
                  ["0",".","\n",".","0","\n","0","."] => "o",
                  ["0","0","\n","0",".","\n","0","."] => "p",
                  ["0","0","\n","0","0","\n","0","."] => "q",
                  ["0",".","\n","0","0","\n","0","."] => "r",
                  [".","0","\n","0",".","\n","0","."] => "s",
                  [".","0","\n","0","0","\n","0","."] => "t",
                  ["0",".","\n",".",".","\n","0","0"] => "u",
                  ["0",".","\n","0",".","\n","0","0"] => "v",
                  [".","0","\n","0","0","\n",".","0"] => "w",
                  ["0","0","\n",".",".","\n","0","0"] => "x",
                  ["0","0","\n",".","0","\n","0","0"] => "y",
                  ["0",".","\n",".","0","\n","0","0"] => "z",
                  [".",".","\n","0","0","\n","0","."] => "!",
                  [".",".","\n",".",".","\n","0","."] => "'",
                  [".",".","\n","0",".","\n",".","."] => ",",
                  [".",".","\n",".",".","\n","0","0"] => "-",
                  [".",".","\n","0","0","\n",".","0"] => ".",
                  [".",".","\n","0",".","\n","0","0"] => "?",
                  [".",".","\n",".",".","\n",".","0"] => "CAPS"
                  }



      if braille.count > 8
        decryption[braille.slice(8..15)].upcase
      else
        decryption[braille]
      end

    # binding.pry
  end
end
